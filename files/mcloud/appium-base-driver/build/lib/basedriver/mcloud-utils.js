"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _fs = _interopRequireDefault(require("appium-support/build/lib/fs"));

var _path = _interopRequireDefault(require("path"));

var _axios = _interopRequireDefault(require("axios"));

var _logger = _interopRequireDefault(require("./logger"));

var _child_process = require("child_process");

async function getLocalAppsFolder() {
  return process.env.APPIUM_APPS_DIR;
}

async function getSharedFolderForAppUrl(url) {
  const sub = await getLocalFileForAppUrl(url);
  const lastSlashInd = sub.lastIndexOf(_path.default.sep);
  var targetPath;

  if (lastSlashInd != -1) {
    targetPath = sub.substring(0, lastSlashInd);
  } else {
    targetPath = '';
  }

  _logger.default.info(`[MCLOUD] Target path [getSharedFolderForAppUrl]: ${targetPath}`);

  const folderExists = await _fs.default.exists(targetPath);
  if (!folderExists) await _fs.default.mkdir(targetPath, {
    recursive: true
  });
  return targetPath;
}

async function getLocalFileForAppUrl(url) {
  var sub = url.substring(url.indexOf('//') + 2);
  sub = sub.substring(sub.indexOf('/'));

  if (sub.includes('?')) {
    sub = sub.substring(0, sub.indexOf('?'));
  }

  sub = sub.replace(/\//g, _path.default.sep);

  const targetPath = _path.default.join(await getLocalAppsFolder(), sub);

  _logger.default.info(`[MCLOUD] Target path [getLocalFileForAppUrl]: ${targetPath}`);

  return targetPath;
}

async function getFileContentLength(remoteUrl) {
  const timeout = 30000;
  const retries = 5;
  const pollingInterval = 3000;
  const requestOpts = {
    url: remoteUrl,
    responseType: 'stream',
    timeout
  };

  const getLengthRequest = async () => {
    for (var i = 0; i < retries; i++) {
      try {
        _logger.default.debug(`[MCLOUD] Making GET http call for retrieving of remote app size`);

        const {
          headers: responseHeaders
        } = await (0, _axios.default)(requestOpts);
        const responseLength = parseInt(responseHeaders['content-length'], 10);

        _logger.default.debug(`[MCLOUD] CONTENT-LENGTH for the file: ${responseLength}`);

        return responseLength;
      } catch (error) {
        console.log(`[MCLOUD] Cannot fetch info about app size. Will retry attempt in ${pollingInterval}ms`);
        await new Promise(resolve => setTimeout(resolve, pollingInterval));
      }
    }
  };

  const length = await getLengthRequest();

  if (length) {
    return length;
  } else {
    throw new Error(`[MCLOUD] Cannot get file content-length from ${remoteUrl} after ${retries} retry(s)`);
  }
}

function executeShell(shellCommand, description) {
  (0, _child_process.exec)(shellCommand, (error, stdout, stderr) => {
    if (error) {
      _logger.default.info(`[MCLOUD] ${description} error: ${error.message}`);

      return;
    }

    if (stderr) {
      _logger.default.info(`[MCLOUD] ${description} stderr: ${stderr}`);

      return;
    }

    _logger.default.info(`[MCLOUD] ${description} command was successfully executed`);
  });
}

module.exports = {
  getLocalAppsFolder,
  getSharedFolderForAppUrl,
  getLocalFileForAppUrl,
  getFileContentLength,
  executeShell
};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
