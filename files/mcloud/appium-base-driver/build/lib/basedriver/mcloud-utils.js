"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _fs = _interopRequireDefault(require("appium-support/build/lib/fs"));

var _path = _interopRequireDefault(require("path"));

var _axios = _interopRequireDefault(require("axios"));

var _logger = _interopRequireDefault(require("./logger"));

var _child_process = require("child_process");

async function getLocalAppsFolder() {
  return process.env.APPIUM_APPS_DIR;
}

async function getSharedFolderForAppUrl(url) {
  const sub = await getLocalFileForAppUrl(url);
  const lastSlashInd = sub.lastIndexOf(_path.default.sep);
  var targetPath;

  if (lastSlashInd != -1) {
    targetPath = sub.substring(0, lastSlashInd);
  } else {
    targetPath = '';
  }

  _logger.default.info(`[MCLOUD] Target path [getSharedFolderForAppUrl]: ${targetPath}`);

  const folderExists = await _fs.default.exists(targetPath);
  if (!folderExists) await _fs.default.mkdir(targetPath, {
    recursive: true
  });
  return targetPath;
}

async function getLocalFileForAppUrl(url) {
  var sub = url.substring(url.indexOf('//') + 2);
  sub = sub.substring(sub.indexOf('/'));

  if (sub.includes('?')) {
    sub = sub.substring(0, sub.indexOf('?'));
  }

  sub = sub.replace(/\//g, _path.default.sep);

  const targetPath = _path.default.join(await getLocalAppsFolder(), sub);

  _logger.default.info(`[MCLOUD] Target path [getLocalFileForAppUrl]: ${targetPath}`);

  return targetPath;
}

async function getFileContentLength(remoteUrl) {
  const timeout = 5000;
  const requestOpts = {
    url: remoteUrl,
    responseType: 'stream',
    timeout
  };

  try {
    const {
      headers: responseHeaders
    } = await (0, _axios.default)(requestOpts);
    const responseLength = parseInt(responseHeaders['content-length'], 10);

    _logger.default.debug(`[MCLOUD] CONTENT-LENGTH for the file: ${responseLength}`);

    return responseLength;
  } catch (err) {
    throw new Error(`[MCLOUD] Cannot get file content-length from ${remoteUrl}: ${err.message}`);
  }
}

function executeShell(shellCommand, description) {
  (0, _child_process.exec)(shellCommand, (error, stdout, stderr) => {
    if (error) {
      _logger.default.info(`[MCLOUD] ${description} error: ${error.message}`);

      return;
    }

    if (stderr) {
      _logger.default.info(`[MCLOUD] ${description} stderr: ${stderr}`);

      return;
    }

    _logger.default.info(`[MCLOUD] ${description} command was successfully executed`);
  });
}

module.exports = {
  getLocalAppsFolder,
  getSharedFolderForAppUrl,
  getLocalFileForAppUrl,
  getFileContentLength,
  executeShell
};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL21jbG91ZC11dGlscy5qcyJdLCJuYW1lcyI6WyJnZXRMb2NhbEFwcHNGb2xkZXIiLCJwcm9jZXNzIiwiZW52IiwiQVBQSVVNX0FQUFNfRElSIiwiZ2V0U2hhcmVkRm9sZGVyRm9yQXBwVXJsIiwidXJsIiwic3ViIiwiZ2V0TG9jYWxGaWxlRm9yQXBwVXJsIiwibGFzdFNsYXNoSW5kIiwibGFzdEluZGV4T2YiLCJwYXRoIiwic2VwIiwidGFyZ2V0UGF0aCIsInN1YnN0cmluZyIsImxvZ2dlciIsImluZm8iLCJmb2xkZXJFeGlzdHMiLCJmcyIsImV4aXN0cyIsIm1rZGlyIiwicmVjdXJzaXZlIiwiaW5kZXhPZiIsImluY2x1ZGVzIiwicmVwbGFjZSIsIm5vZGVQYXRoIiwiam9pbiIsImdldEZpbGVDb250ZW50TGVuZ3RoIiwicmVtb3RlVXJsIiwidGltZW91dCIsInJlcXVlc3RPcHRzIiwicmVzcG9uc2VUeXBlIiwiaGVhZGVycyIsInJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlTGVuZ3RoIiwicGFyc2VJbnQiLCJkZWJ1ZyIsImVyciIsIkVycm9yIiwibWVzc2FnZSIsImV4ZWN1dGVTaGVsbCIsInNoZWxsQ29tbWFuZCIsImRlc2NyaXB0aW9uIiwiZXJyb3IiLCJzdGRvdXQiLCJzdGRlcnIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFFQSxlQUFlQSxrQkFBZixHQUFvQztBQUNoQyxTQUFPQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsZUFBbkI7QUFDSDs7QUFFRCxlQUFlQyx3QkFBZixDQUF3Q0MsR0FBeEMsRUFBNkM7QUFDekMsUUFBTUMsR0FBRyxHQUFHLE1BQU1DLHFCQUFxQixDQUFDRixHQUFELENBQXZDO0FBRUEsUUFBTUcsWUFBWSxHQUFHRixHQUFHLENBQUNHLFdBQUosQ0FBZ0JDLGNBQUtDLEdBQXJCLENBQXJCO0FBQ0EsTUFBSUMsVUFB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QUFHREksTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQUU5QyxFQUFBQSxrQkFBRjtBQUFzQkksRUFBQUEsd0JBQXRCO0FBQWdERyxFQUFBQSxxQkFBaEQ7QUFBdUVtQixFQUFBQSxvQkFBdkU7QUFBNkZhLEVBQUFBO0FBQTdGLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2FwcGl1bS1zdXBwb3J0L2J1aWxkL2xpYi9mcyc7XG5pbXBvcnQgbm9kZVBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYWxBcHBzRm9sZGVyKCkge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5BUFBJVU1fQVBQU19ESVI7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNoYXJlZEZvbGRlckZvckFwcFVybCh1cmwpIHtcbiAgICBjb25zdCBzdWIgPSBhd2FpdCBnZXRMb2NhbEZpbGVGb3JBcHBVcmwodXJsKTtcblxuICAgIGNvbnN0IGxhc3RTbGFzaEluZCA9IHN1Yi5sYXN0SW5kZXhPZihwYXRoLnNlcCk7XG4gICAgdmFyIHRhcmdldFBhdGg7XG4gICAgaWYobGFzdFNsYXNoSW5kICE9IC0xKSB7XG4gICAgICAgIHRhcmdldFBhdGggPSBzdWIuc3Vic3RyaW5nKDAsIGxhc3RTbGFzaEluZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0UGF0aCA9ICcnO1xuICAgIH1cblxuICAgIGxvZ2dlci5pbmZvKGBbTUNMT1VEXSBUYXJnZXQgcGF0aCBbZ2V0U2hhcmVkRm9sZGVyRm9yQXBwVXJsXTogJHt0YXJnZXRQYXRofWApXG4gICAgY29uc3QgZm9sZGVyRXhpc3RzID0gYXdhaXQgZnMuZXhpc3RzKHRhcmdldFBhdGgpO1xuICAgIGlmKCFmb2xkZXJFeGlzdHMpXG4gICAgICAgIGF3YWl0IGZzLm1rZGlyKHRhcmdldFBhdGgsIHtyZWN1cnNpdmUgOiB0cnVlfSk7XG4gIFxuICAgIHJldHVybiB0YXJnZXRQYXRoO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRMb2NhbEZpbGVGb3JBcHBVcmwodXJsKSB7XG4gICAgdmFyIHN1YiA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YoJy8vJykgKyAyKVxuICAgIHN1YiA9IHN1Yi5zdWJzdHJpbmcoc3ViLmluZGV4T2YoJy8nKSk7XG4gICAgaWYoc3ViLmluY2x1ZGVzKCc/JykpIHtcbiAgICAgICAgc3ViID0gc3ViLnN1YnN0cmluZygwLCBzdWIuaW5kZXhPZignPycpKTtcbiAgICB9XG4gICAgc3ViID0gc3ViLnJlcGxhY2UoL1xcLy9nLCBwYXRoLnNlcCk7XG5cbiAgICBjb25zdCB0YXJnZXRQYXRoID0gbm9kZVBhdGguam9pbihhd2FpdCBnZXRMb2NhbEFwcHNGb2xkZXIoKSwgc3ViKTtcbiAgICBsb2dnZXIuaW5mbyhgW01DTE9VRF0gVGFyZ2V0IHBhdGggW2dldExvY2FsRmlsZUZvckFwcFVybF06ICR7dGFyZ2V0UGF0aH1gKVxuICAgIHJldHVybiB0YXJnZXRQYXRoO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRGaWxlQ29udGVudExlbmd0aChyZW1vdGVVcmwpIHtcbiAgICBjb25zdCB0aW1lb3V0ID0gNTAwMDtcbiAgICBjb25zdCByZXF1ZXN0T3B0cyA9IHtcbiAgICAgICAgdXJsOiByZW1vdGVVcmwsXG4gICAgICAgIHJlc3BvbnNlVHlwZTogJ3N0cmVhbScsXG4gICAgICAgIHRpbWVvdXQsXG4gICAgfTtcblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIH0gPSBhd2FpdCBheGlvcyhyZXF1ZXN0T3B0cyk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlTGVuZ3RoID0gcGFyc2VJbnQocmVzcG9uc2VIZWFkZXJzWydjb250ZW50LWxlbmd0aCddLCAxMCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgW01DTE9VRF0gQ09OVEVOVC1MRU5HVEggZm9yIHRoZSBmaWxlOiAke3Jlc3BvbnNlTGVuZ3RofWApO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2VMZW5ndGg7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgW01DTE9VRF0gQ2Fubm90IGdldCBmaWxlIGNvbnRlbnQtbGVuZ3RoIGZyb20gJHtyZW1vdGVVcmx9OiAke2Vyci5tZXNzYWdlfWApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZXhlY3V0ZVNoZWxsKHNoZWxsQ29tbWFuZCwgZGVzY3JpcHRpb24pIHtcbiAgICBleGVjKHNoZWxsQ29tbWFuZCwgKGVycm9yLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGBbTUNMT1VEXSAke2Rlc2NyaXB0aW9ufSBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGRlcnIpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGBbTUNMT1VEXSAke2Rlc2NyaXB0aW9ufSBzdGRlcnI6ICR7c3RkZXJyfWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5pbmZvKGBbTUNMT1VEXSAke2Rlc2NyaXB0aW9ufSBjb21tYW5kIHdhcyBzdWNjZXNzZnVsbHkgZXhlY3V0ZWRgKTtcbiAgICAgIH0pO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0geyBnZXRMb2NhbEFwcHNGb2xkZXIsIGdldFNoYXJlZEZvbGRlckZvckFwcFVybCwgZ2V0TG9jYWxGaWxlRm9yQXBwVXJsLCBnZXRGaWxlQ29udGVudExlbmd0aCwgZXhlY3V0ZVNoZWxsIH0iXSwiZmlsZSI6ImxpYi9iYXNlZHJpdmVyL21jbG91ZC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
