"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _fs = _interopRequireDefault(require("appium-support/build/lib/fs"));

var _path = _interopRequireDefault(require("path"));

var _axios = _interopRequireDefault(require("axios"));

var _logger = _interopRequireDefault(require("./logger"));

var _child_process = require("child_process");

async function getLocalAppsFolder() {
  return process.env.APPIUM_APPS_DIR;
}

async function getSharedFolderForAppUrl(url) {
  const sub = await getLocalFileForAppUrl(url);
  const lastSlashInd = sub.lastIndexOf(_path.default.sep);
  var targetPath;

  if (lastSlashInd != -1) {
    targetPath = sub.substring(0, lastSlashInd);
  } else {
    targetPath = '';
  }

  _logger.default.info(`Target path [getSharedFolderForAppUrl]: ${targetPath}`);

  const folderExists = await _fs.default.exists(targetPath);
  if (!folderExists) await _fs.default.mkdir(targetPath, {
    recursive: true
  });
  return targetPath;
}

async function getLocalFileForAppUrl(url) {
  var sub = url.substring(url.indexOf('//') + 2);
  sub = sub.substring(sub.indexOf('/'));

  if (sub.includes('?')) {
    sub = sub.substring(0, sub.indexOf('?'));
  }

  sub = sub.replace(/\//g, _path.default.sep);

  const targetPath = _path.default.join(await getLocalAppsFolder(), sub);

  _logger.default.info(`Target path [getLocalFileForAppUrl]: ${targetPath}`);

  return targetPath;
}

async function getFileContentLength(remoteUrl) {
  const timeout = 5000;
  const requestOpts = {
    url: remoteUrl,
    responseType: 'stream',
    timeout
  };

  try {
    const {
      headers: responseHeaders
    } = await (0, _axios.default)(requestOpts);
    const responseLength = parseInt(responseHeaders['content-length'], 10);

    _logger.default.info("!!CONTENT-LENGTH: " + responseLength);

    return responseLength;
  } catch (err) {
    throw new Error(`Cannot get file content-length from ${remoteUrl}: ${err.message}`);
  }
}

function executeShell(shellCommand, description) {
  (0, _child_process.exec)(shellCommand, (error, stdout, stderr) => {
    if (error) {
      _logger.default.info(`${description} error: ${error.message}`);

      return;
    }

    if (stderr) {
      _logger.default.info(`${description} stderr: ${stderr}`);

      return;
    }

    _logger.default.info(`${description} command was successfully executed`);
  });
}

module.exports = {
  getLocalAppsFolder,
  getSharedFolderForAppUrl,
  getLocalFileForAppUrl,
  getFileContentLength,
  executeShell
};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL21jbG91ZC11dGlscy5qcyJdLCJuYW1lcyI6WyJnZXRMb2NhbEFwcHNGb2xkZXIiLCJwcm9jZXNzIiwiZW52IiwiQVBQSVVNX0FQUFNfRElSIiwiZ2V0U2hhcmVkRm9sZGVyRm9yQXBwVXJsIiwidXJsIiwic3ViIiwiZ2V0TG9jYWxGaWxlRm9yQXBwVXJsIiwibGFzdFNsYXNoSW5kIiwibGFzdEluZGV4T2YiLCJwYXRoIiwic2VwIiwidGFyZ2V0UGF0aCIsInN1YnN0cmluZyIsImxvZ2dlciIsImluZm8iLCJmb2xkZXJFeGlzdHMiLCJmcyIsImV4aXN0cyIsIm1rZGlyIiwicmVjdXJzaXZlIiwiaW5kZXhPZiIsImluY2x1ZGVzIiwicmVwbGFjZSIsIm5vZGVQYXRoIiwiam9pbiIsImdldEZpbGVDb250ZW50TGVuZ3RoIiwicmVtb3RlVXJsIiwidGltZW91dCIsInJlcXVlc3RPcHRzIiwicmVzcG9uc2VUeXBlIiwiaGVhZGVycyIsInJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlTGVuZ3RoIiwicGFyc2VJbnQiLCJlcnIiLCJFcnJvciIsIm1lc3NhZ2UiLCJleGVjdXRlU2hlbGwiLCJzaGVsbENvbW1hbmQiLCJkZXNjcmlwdGlvbiIsImVycm9yIiwic3Rkb3V0Iiwic3RkZXJyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUEsZUFBZUEsa0JBQWYsR0FBb0M7QUFDaEMsU0FBT0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGVBQW5CO0FBQ0g7O0FBRUQsZUFBZUMsd0JBQWYsQ0FBd0NDLEdBQXhDLEVBQTZDO0FBQ3pDLFFBQU1DLEdBQUcsR0FBRyxNQUFNQyxxQkFBcUIsQ0FBQ0YsR0FBRCxDQUF2QztBQUVBLFFBQU1HLFlBQVksR0FBR0YsR0FBRyxDQUFDRyxXQUFKLENBQWdCQyxjQUFLQyxHQUFyQixDQUFyQjtBQUNBLE1BQUlDLFVBQUo7O0FBQ0Es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QUNDLE9BQVAsR0FBaUI7QUFBRTdDLEVBQUFBLGtCQUFGO0FBQXNCSSxFQUFBQSx3QkFBdEI7QUFBZ0RHLEVBQUFBLHFCQUFoRDtBQUF1RW1CLEVBQUFBLG9CQUF2RTtBQUE2RlksRUFBQUE7QUFBN0YsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnYXBwaXVtLXN1cHBvcnQvYnVpbGQvbGliL2ZzJztcbmltcG9ydCBub2RlUGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRMb2NhbEFwcHNGb2xkZXIoKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LkFQUElVTV9BUFBTX0RJUjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0U2hhcmVkRm9sZGVyRm9yQXBwVXJsKHVybCkge1xuICAgIGNvbnN0IHN1YiA9IGF3YWl0IGdldExvY2FsRmlsZUZvckFwcFVybCh1cmwpO1xuXG4gICAgY29uc3QgbGFzdFNsYXNoSW5kID0gc3ViLmxhc3RJbmRleE9mKHBhdGguc2VwKTtcbiAgICB2YXIgdGFyZ2V0UGF0aDtcbiAgICBpZihsYXN0U2xhc2hJbmQgIT0gLTEpIHtcbiAgICAgICAgdGFyZ2V0UGF0aCA9IHN1Yi5zdWJzdHJpbmcoMCwgbGFzdFNsYXNoSW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRQYXRoID0gJyc7XG4gICAgfVxuXG4gICAgbG9nZ2VyLmluZm8oYFRhcmdldCBwYXRoIFtnZXRTaGFyZWRGb2xkZXJGb3JBcHBVcmxdOiAke3RhcmdldFBhdGh9YClcbiAgICBjb25zdCBmb2xkZXJFeGlzdHMgPSBhd2FpdCBmcy5leGlzdHModGFyZ2V0UGF0aCk7XG4gICAgaWYoIWZvbGRlckV4aXN0cylcbiAgICAgICAgYXdhaXQgZnMubWtkaXIodGFyZ2V0UGF0aCwge3JlY3Vyc2l2ZSA6IHRydWV9KTtcbiAgXG4gICAgcmV0dXJuIHRhcmdldFBhdGg7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldExvY2FsRmlsZUZvckFwcFVybCh1cmwpIHtcbiAgICB2YXIgc3ViID0gdXJsLnN1YnN0cmluZyh1cmwuaW5kZXhPZignLy8nKSArIDIpXG4gICAgc3ViID0gc3ViLnN1YnN0cmluZyhzdWIuaW5kZXhPZignLycpKTtcbiAgICBpZihzdWIuaW5jbHVkZXMoJz8nKSkge1xuICAgICAgICBzdWIgPSBzdWIuc3Vic3RyaW5nKDAsIHN1Yi5pbmRleE9mKCc/JykpO1xuICAgIH1cbiAgICBzdWIgPSBzdWIucmVwbGFjZSgvXFwvL2csIHBhdGguc2VwKTtcblxuICAgIGNvbnN0IHRhcmdldFBhdGggPSBub2RlUGF0aC5qb2luKGF3YWl0IGdldExvY2FsQXBwc0ZvbGRlcigpLCBzdWIpO1xuICAgIGxvZ2dlci5pbmZvKGBUYXJnZXQgcGF0aCBbZ2V0TG9jYWxGaWxlRm9yQXBwVXJsXTogJHt0YXJnZXRQYXRofWApXG4gICAgcmV0dXJuIHRhcmdldFBhdGg7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEZpbGVDb250ZW50TGVuZ3RoKHJlbW90ZVVybCkge1xuICAgIGNvbnN0IHRpbWVvdXQgPSA1MDAwO1xuICAgIGNvbnN0IHJlcXVlc3RPcHRzID0ge1xuICAgICAgICB1cmw6IHJlbW90ZVVybCxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnc3RyZWFtJyxcbiAgICAgICAgdGltZW91dCxcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgfSA9IGF3YWl0IGF4aW9zKHJlcXVlc3RPcHRzKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2VMZW5ndGggPSBwYXJzZUludChyZXNwb25zZUhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10sIDEwKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCIhIUNPTlRFTlQtTEVOR1RIOiBcIiArIHJlc3BvbnNlTGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlTGVuZ3RoO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBnZXQgZmlsZSBjb250ZW50LWxlbmd0aCBmcm9tICR7cmVtb3RlVXJsfTogJHtlcnIubWVzc2FnZX1gKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVTaGVsbChzaGVsbENvbW1hbmQsIGRlc2NyaXB0aW9uKSB7XG4gICAgZXhlYyhzaGVsbENvbW1hbmQsIChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgJHtkZXNjcmlwdGlvbn0gZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RkZXJyKSB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgJHtkZXNjcmlwdGlvbn0gc3RkZXJyOiAke3N0ZGVycn1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuaW5mbyhgJHtkZXNjcmlwdGlvbn0gY29tbWFuZCB3YXMgc3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkYCk7XG4gICAgICB9KTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZ2V0TG9jYWxBcHBzRm9sZGVyLCBnZXRTaGFyZWRGb2xkZXJGb3JBcHBVcmwsIGdldExvY2FsRmlsZUZvckFwcFVybCwgZ2V0RmlsZUNvbnRlbnRMZW5ndGgsIGV4ZWN1dGVTaGVsbCB9Il0sImZpbGUiOiJsaWIvYmFzZWRyaXZlci9tY2xvdWQtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
