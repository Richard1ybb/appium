"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _protocol = require("../../protocol");

var _appiumSupport = require("appium-support");

var _capabilities = require("../capabilities");

var _mcloudUtils = require("../mcloud-utils");

let commands = {};

commands.createSession = async function createSession(jsonwpDesiredCapabilities, jsonwpRequiredCaps, w3cCapabilities) {
  _logger.default.debug(`[MCLOUD] resetting logs`);

  const reset_log_command = `/opt/reset-logs.sh`;
  (0, _mcloudUtils.executeShell)(reset_log_command, '[MCLOUD] reset appium logs');

  if (this.sessionId !== null) {
    throw new _protocol.errors.SessionNotCreatedError('Cannot create a new session ' + 'while one is in progress');
  }

  _logger.default.debug();

  let caps;

  if (w3cCapabilities) {
    this.setProtocolW3C();

    if (jsonwpDesiredCapabilities) {
      _logger.default.debug(`W3C capabilities and MJSONWP desired capabilities were provided`);
    }

    if (jsonwpDesiredCapabilities && !_lodash.default.isPlainObject(w3cCapabilities)) {
      if (!_lodash.default.isEmpty(w3cCapabilities)) {
        _logger.default.warn(`Expected W3C "capabilities" to be a JSON Object but was provided with: ${JSON.stringify(w3cCapabilities)}`);
      }

      _logger.default.warn(`Falling back to MJSONWP desired capabilities`);

      this.setProtocolMJSONWP();
      caps = jsonwpDesiredCapabilities;
    } else {
      _logger.default.debug(`Creating session with W3C capabilities: ${JSON.stringify(w3cCapabilities, null, 2)}`);

      caps = (0, _capabilities.processCapabilities)(w3cCapabilities, this.desiredCapConstraints, this.shouldValidateCaps);
    }
  } else {
    this.setProtocolMJSONWP();

    _logger.default.debug(`Creating session with MJSONWP desired capabilities: ${JSON.stringify(jsonwpDesiredCapabilities, null, 2)}`);

    caps = jsonwpDesiredCapabilities || {};
  }

  caps = fixCaps(caps, this.desiredCapConstraints);
  this.validateDesiredCaps(caps);
  this.sessionId = _appiumSupport.util.uuidV4();
  this.caps = caps;
  this.opts = _lodash.default.cloneDeep(this.initialOpts);
  Object.assign(this.opts, this.caps);

  if (this.opts.noReset && this.opts.fullReset) {
    throw new Error("The 'noReset' and 'fullReset' capabilities are mutually " + 'exclusive and should not both be set to true. You ' + "probably meant to just use 'fullReset' on its own");
  }

  if (this.opts.noReset === true) {
    this.opts.fullReset = false;
  }

  if (this.opts.fullReset === true) {
    this.opts.noReset = false;
  }

  this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
  this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;

  if (typeof this.opts.app === 'string' && this.opts.app.trim() === '') {
    this.opts.app = null;
  }

  if (!_lodash.default.isUndefined(this.caps.newCommandTimeout)) {
    this.newCommandTimeoutMs = this.caps.newCommandTimeout * 1000;
  }

  _logger.default.info(`Session created with session id: ${this.sessionId}`);

  _logger.default.debug(`[MCLOUD] Starting artifacts capturing for init steps`);

  const start_rec_command = `/opt/start-capture-artifacts.sh ${this.sessionId} > /tmp/video.log 2>&1`;
  (1, _mcloudUtils.executeShell)(start_rec_command, '[MCLOUD] start artifacts capturing for init steps');
  process.env.sessionId = this.sessionId;
  return [this.sessionId, caps];
};

commands.getSessions = async function getSessions() {
  let ret = [];

  if (this.sessionId) {
    ret.push({
      id: this.sessionId,
      capabilities: this.caps
    });
  }

  return ret;
};

commands.getSession = async function getSession() {
  if (this.caps.eventTimings) {
    return Object.assign({}, this.caps, {
      events: this.eventHistory
    });
  }

  return this.caps;
};

commands.deleteSession = async function deleteSession() {
  this.clearNewCommandTimeout();

  if (this.isCommandsQueueEnabled && this.commandsQueueGuard.isBusy()) {
    for (const key of _lodash.default.keys(this.commandsQueueGuard.queues)) {
      this.commandsQueueGuard.queues[key] = [];
    }
  }

  _logger.default.debug(`[MCLOUD] stopping capturing artifacts for session ${this.sessionId}`);

  const stop_rec_command = `/opt/stop-capture-artifacts.sh ${this.sessionId}`;
  (0, _mcloudUtils.executeShell)(stop_rec_command, '[MCLOUD] stop capturing artifacts');
  await new Promise(resolve => setTimeout(resolve, 300));

  _logger.default.debug(`[MCLOUD] uploading captured artifacts`);

  const upload_video_command = `/opt/upload-artifacts.sh ${this.sessionId} >> /tmp/video.log`;
  (0, _mcloudUtils.executeShell)(upload_video_command, '[MCLOUD] upload captured artifacts');
  this.sessionId = null;
};

function fixCaps(originalCaps, desiredCapConstraints = {}) {
  let caps = _lodash.default.clone(originalCaps);

  let booleanCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isBoolean === true));

  for (let cap of booleanCaps) {
    let value = originalCaps[cap];

    if (_lodash.default.isString(value)) {
      value = value.toLowerCase();

      if (value === 'true' || value === 'false') {
        _logger.default.warn(`Capability '${cap}' changed from string to boolean. This may cause unexpected behavior`);

        caps[cap] = value === 'true';
      }
    }
  }

  let intCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isNumber === true));

  for (let cap of intCaps) {
    let value = originalCaps[cap];

    if (_lodash.default.isString(value) && !isNaN(value)) {
      value = value.trim();
      let newValue = parseInt(value, 10);

      if (value !== `${newValue}`) {
        newValue = parseFloat(value);
      }

      _logger.default.warn(`Capability '${cap}' changed from string ('${value}') to integer (${newValue}). This may cause unexpected behavior`);

      caps[cap] = newValue;
    }
  }

  return caps;
}

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL3Nlc3Npb24uanMiXSwibmFtZXMiOlsiY29tbWFuZHMiLCJjcmVhdGVTZXNzaW9uIiwianNvbndwRGVzaXJlZENhcGFiaWxpdGllcyIsImpzb253cFJlcXVpcmVkQ2FwcyIsInczY0NhcGFiaWxpdGllcyIsImxvZyIsImRlYnVnIiwicmVzZXRfbG9nX2NvbW1hbmQiLCJzZXNzaW9uSWQiLCJlcnJvcnMiLCJTZXNzaW9uTm90Q3JlYXRlZEVycm9yIiwiY2FwcyIsInNldFByb3RvY29sVzNDIiwiXyIsImlzUGxhaW5PYmplY3QiLCJpc0VtcHR5Iiwid2FybiIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXRQcm90b2NvbE1KU09OV1AiLCJkZXNpcmVkQ2FwQ29uc3RyYWludHMiLCJzaG91bGRWYWxpZGF0ZUNhcHMiLCJmaXhDYXBzIiwidmFsaWRhdGVEZXNpcmVkQ2FwcyIsInV0aWwiLCJ1dWlkVjQiLCJvcHRzIiwiY2xvbmVEZWVwIiwiaW5pdGlhbE9wdHMiLCJPYmplY3QiLCJhc3NpZ24iLCJub1Jlc2V0IiwiZnVsbFJlc2V0IiwiRXJyb3IiLCJmYXN0UmVzZXQiLCJza2lwVW5pbnN0YWxsIiwiYXBwIiwidHJpbSIsImlzVW5kZWZpbmVkIiwibmV3Q29tbWFuZFRpbWVvdXQiLCJuZXdDb21tYW5kVGltZW91dE1zIiwiaW5mbyIsInN0YXJ0X3JlY19jb21tYW5kIiwicHJvY2VzcyIsImVudiIsImdldFNlc3Npb25zIiwicmV0IiwicHVzaCIsImlkIiwiY2FwYWJpbGl0aWVzIiwiZ2V0U2Vzc2lvbiIsImV2ZW50VGltaW5ncyIsImV2ZW50cyIsImV2ZW50SGlzdG9yeSIsImRlbGV0ZVNlc3Npb24iLCJjbGVhck5ld0NvbW1hbmRUaW1lb3V0IiwiaXNDb21tYW5kc1F1ZXVlRW5hYmxlZCIsImNvbW1hbmRzUXVldWVHdWFyZCIsImlzQnVzeSIsImtleSIsImtleXMiLCJxdWV1ZXMiLCJzdG9wX3JlY19jb21tYW5kIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwidXBsb2FkX3ZpZGVvX2NvbW1hbmQiLCJvcmlnaW5hbENhcHMiLCJjbG9uZSIsImJvb2xlYW5DYXBzIiwicGlja0J5IiwiayIsImlzQm9vbGVhbiIsImNhcCIsInZhbHVlIiwiaXNTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImludENhcHMiLCJpc051bWJlciIsImlzTmFOIiwibmV3VmFsdWUiLCJwYXJzZUludCIsInBhcnNlRmxvYXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7O0FBRUFBLFFBQVEsQ0FBQ0MsYUFBVCxHQUF5QixlQUFlQSxhQUFmLENBQThCQyx5QkFBOUIsRUFBeURDLGtCQUF6RCxFQUE2RUMsZUFBN0UsRUFBOEY7QUFDckhDLGtCQUFJQyxLQUFKLENBQVcseUJBQVg7O0FBQ0EsUUFBTUMsaUJBQWlCLEdBQUksb0JBQTNCO0FBQ0EsaUNBQWFBLGlCQUFiLEVBQWdDLDRCQUFoQzs7QUFPQSxNQUFJLEtBQUtDLFNBQUwsS0FBbUIsSUFBdkIsRUFBNkI7QUFDM0IsVUFBTSxJQUFJQyxpQkFBT0Msc0JBQVgsQ0FBa0MsaUNBQ0EsMEJBRGxDLENBQU47QUFFRDs7QUFFREwsa0JBQUlDLEtBQUo7O0FBR0EsTUFBSUssSUFBSjs7QUFDQSxNQUFJUCxlQUFKLEVBQXFCO0FBQ25CLFNBQUtRLGNBQUw7O0FBQ0EsUUFBSVYseUJBQUosRUFBK0I7QUFDN0JHLHNCQUFJQyxLQUFKLENBQVcsaUVBQVg7QUFDRDs7QUFFRCxRQUFJSix5QkFBeUIsSUFBSSxDQUFDVyxnQkFBRUMsYUFBRixDQUFnQlYsZUFBaEIsQ0FBbEMsRUFBb0U7QUFHbEUsVUFBSSxDQUFDUyxnQkFBRUUsT0FBRixDQUFVWCxlQUFWLENBQUwsRUFBaUM7QUFDL0JDLHdCQUFJVyxJQUFKLENBQVUsMEVBQXlFQyxJQUFJLENBQUNDLFNBQUwsQ0FBZWQsZUFBZixDQUFnQyxF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QWlDbUQsQ0FBRCxJQUFPQSxDQUFDLENBQUNPLFFBQUYsS0FBZSxJQUF0RCxDQUFQLENBQWQ7O0FBQ0EsT0FBSyxJQUFJTCxHQUFULElBQWdCSSxPQUFoQixFQUF5QjtBQUN2QixRQUFJSCxLQUFLLEdBQUdQLFlBQVksQ0FBQ00sR0FBRCxDQUF4Qjs7QUFDQSxRQUFJNUQsZ0JBQUU4RCxRQUFGLENBQVdELEtBQVgsS0FBcUIsQ0FBQ0ssS0FBSyxDQUFDTCxLQUFELENBQS9CLEVBQXdDO0FBQ3RDQSxNQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ3JDLElBQU4sRUFBUjtBQUNBLFVBQUkyQyxRQUFRLEdBQUdDLFFBQVEsQ0FBQ1AsS0FBRCxFQUFRLEVBQVIsQ0FBdkI7O0FBQ0EsVUFBSUEsS0FBSyxLQUFNLEdBQUVNLFFBQVMsRUFBMUIsRUFBNkI7QUFDM0JBLFFBQUFBLFFBQVEsR0FBR0UsVUFBVSxDQUFDUixLQUFELENBQXJCO0FBQ0Q7O0FBQ0RyRSxzQkFBSVcsSUFBSixDQUFVLGVBQWN5RCxHQUFJLDJCQUEwQkMsS0FBTSxrQkFBaUJNLFFBQVMsdUNBQXRGOztBQUNBckUsTUFBQUEsSUFBSSxDQUFDOEQsR0FBRCxDQUFKLEdBQVlPLFFBQVo7QUFDRDtBQUNGOztBQUVELFNBQU9yRSxJQUFQO0FBQ0Q7O2VBRWNYLFEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWF3YWl0ICovXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnLi4vLi4vcHJvdG9jb2wnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IHByb2Nlc3NDYXBhYmlsaXRpZXMgfSBmcm9tICcuLi9jYXBhYmlsaXRpZXMnO1xuaW1wb3J0IHsgZXhlY3V0ZVNoZWxsIH0gZnJvbSAnLi4vbWNsb3VkLXV0aWxzJztcblxubGV0IGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLmNyZWF0ZVNlc3Npb24gPSBhc3luYyBmdW5jdGlvbiBjcmVhdGVTZXNzaW9uIChqc29ud3BEZXNpcmVkQ2FwYWJpbGl0aWVzLCBqc29ud3BSZXF1aXJlZENhcHMsIHczY0NhcGFiaWxpdGllcykge1xuICBsb2cuZGVidWcoYFtNQ0xPVURdIHJlc2V0dGluZyBsb2dzYCk7XG4gIGNvbnN0IHJlc2V0X2xvZ19jb21tYW5kID0gYC9vcHQvcmVzZXQtbG9ncy5zaGA7XG4gIGV4ZWN1dGVTaGVsbChyZXNldF9sb2dfY29tbWFuZCwgJ1tNQ0xPVURdIHJlc2V0IGFwcGl1bSBsb2dzJyk7XG5cbiAgLy8gVE9ETzogdGVzdCBuZWdhdGl2ZSBjYXNlcy4gU2VlbXMgbGlrZSB3ZSBoYW5kbGVkIGl0IGNvcnJlY3RseSBvbiBzZXNzaW9uIGZpbmlzaCBhbmQgZHVyaW5nIGFwcGl1bSBjb250YWluZXIgdGVybWluYXRpb25cbiAgLy8gIF9sb2dnZXIuZGVmYXVsdC5kZWJ1ZyhgW01DTE9VRF0gc3RvcHBpbmcgY2FwdHVyaW5nIGFydGlmYWN0cyBiZWZvcmUgc2Vzc2lvbiBzdGFydHVwYCk7XG4gIC8vICBjb25zdCBzdG9wX3JlY19jb21tYW5kID0gYC9vcHQvc3RvcC1jYXB0dXJlLWFydGlmYWN0cy5zaGA7XG4gIC8vICAoMCwgX21jbG91ZFV0aWxzLmV4ZWN1dGVTaGVsbCkoc3RvcF9yZWNfY29tbWFuZCwgJ1tNQ0xPVURdIHN0b3AgY2FwdHVyaW5nIGFydGlmYWN0cyBiZWZvcmUgc2Vzc2lvbiBzdGFydHVwJyk7XG5cbiAgaWYgKHRoaXMuc2Vzc2lvbklkICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5TZXNzaW9uTm90Q3JlYXRlZEVycm9yKCdDYW5ub3QgY3JlYXRlIGEgbmV3IHNlc3Npb24gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aGlsZSBvbmUgaXMgaW4gcHJvZ3Jlc3MnKTtcbiAgfVxuXG4gIGxvZy5kZWJ1ZygpO1xuXG4gIC8vIERldGVybWluZSB3ZWF0aGVyIHdlIHNob3VsZCB1c2UganNvbndwRGVzaXJlZENhcGFiaWxpdGllcyBvciB3M2NDYXBhYmlsaXRpZXMgdG8gZ2V0IGNhcHMgZnJvbVxuICBsZXQgY2FwcztcbiAgaWYgKHczY0NhcGFiaWxpdGllcykge1xuICAgIHRoaXMuc2V0UHJvdG9jb2xXM0MoKTtcbiAgICBpZiAoanNvbndwRGVzaXJlZENhcGFiaWxpdGllcykge1xuICAgICAgbG9nLmRlYnVnKGBXM0MgY2FwYWJpbGl0aWVzIGFuZCBNSlNPTldQIGRlc2lyZWQgY2FwYWJpbGl0aWVzIHdlcmUgcHJvdmlkZWRgKTtcbiAgICB9XG5cbiAgICBpZiAoanNvbndwRGVzaXJlZENhcGFiaWxpdGllcyAmJiAhXy5pc1BsYWluT2JqZWN0KHczY0NhcGFiaWxpdGllcykpIHtcbiAgICAgIC8vIElmIFczQyBDYXBhYmlsaXRpZXMgYW5kIE1KU09OV1AgQ2FwYWJpbGl0aWVzIHdlcmUgcHJvdmlkZWQgYW5kIFczQyBjYXBzIGFyZW4ndCBhIHBsYWluIG9iamVjdCxcbiAgICAgIC8vIGxvZyBhIHdhcm5pbmcgYW5kIGZhbGwgYmFjayB0byBNSlNPTldQXG4gICAgICBpZiAoIV8uaXNFbXB0eSh3M2NDYXBhYmlsaXRpZXMpKSB7XG4gICAgICAgIGxvZy53YXJuKGBFeHBlY3RlZCBXM0MgXCJjYXBhYmlsaXRpZXNcIiB0byBiZSBhIEpTT04gT2JqZWN0IGJ1dCB3YXMgcHJvdmlkZWQgd2l0aDogJHtKU09OLnN0cmluZ2lmeSh3M2NDYXBhYmlsaXRpZXMpfWApO1xuICAgICAgfVxuICAgICAgbG9nLndhcm4oYEZhbGxpbmcgYmFjayB0byBNSlNPTldQIGRlc2lyZWQgY2FwYWJpbGl0aWVzYCk7XG4gICAgICB0aGlzLnNldFByb3RvY29sTUpTT05XUCgpO1xuICAgICAgY2FwcyA9IGpzb253cERlc2lyZWRDYXBhYmlsaXRpZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5kZWJ1ZyhgQ3JlYXRpbmcgc2Vzc2lvbiB3aXRoIFczQyBjYXBhYmlsaXRpZXM6ICR7SlNPTi5zdHJpbmdpZnkodzNjQ2FwYWJpbGl0aWVzLCBudWxsLCAyKX1gKTtcbiAgICAgIGNhcHMgPSBwcm9jZXNzQ2FwYWJpbGl0aWVzKHczY0NhcGFiaWxpdGllcywgdGhpcy5kZXNpcmVkQ2FwQ29uc3RyYWludHMsIHRoaXMuc2hvdWxkVmFsaWRhdGVDYXBzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZXRQcm90b2NvbE1KU09OV1AoKTtcbiAgICBsb2cuZGVidWcoYENyZWF0aW5nIHNlc3Npb24gd2l0aCBNSlNPTldQIGRlc2lyZWQgY2FwYWJpbGl0aWVzOiAke0pTT04uc3RyaW5naWZ5KGpzb253cERlc2lyZWRDYXBhYmlsaXRpZXMsIG51bGwsIDIpfWApO1xuICAgIGNhcHMgPSBqc29ud3BEZXNpcmVkQ2FwYWJpbGl0aWVzIHx8IHt9O1xuICB9XG5cbiAgY2FwcyA9IGZpeENhcHMoY2FwcywgdGhpcy5kZXNpcmVkQ2FwQ29uc3RyYWludHMpO1xuICB0aGlzLnZhbGlkYXRlRGVzaXJlZENhcHMoY2Fwcyk7XG5cbiAgdGhpcy5zZXNzaW9uSWQgPSB1dGlsLnV1aWRWNCgpO1xuICB0aGlzLmNhcHMgPSBjYXBzO1xuICB0aGlzLm9wdHMgPSBfLmNsb25lRGVlcCh0aGlzLmluaXRpYWxPcHRzKTtcblxuICAvLyBtZXJnZSBjYXBzIG9udG8gb3B0cyBzbyB3ZSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHdoYXQncyB3aGVyZVxuICBPYmplY3QuYXNzaWduKHRoaXMub3B0cywgdGhpcy5jYXBzKTtcblxuICAvLyBkZWFsIHdpdGggcmVzZXRzXG4gIC8vIHNvbWUgcGVvcGxlIGxpa2UgdG8gZG8gd2VpcmQgdGhpbmdzIGJ5IHNldHRpbmcgbm9SZXNldCBhbmQgZnVsbFJlc2V0XG4gIC8vIGJvdGggdG8gdHJ1ZSwgYnV0IHRoaXMgaXMgbWlzZ3VpZGVkIGFuZCBzdHJhbmdlLCBzbyBlcnJvciBoZXJlIGluc3RlYWRcbiAgaWYgKHRoaXMub3B0cy5ub1Jlc2V0ICYmIHRoaXMub3B0cy5mdWxsUmVzZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgJ25vUmVzZXQnIGFuZCAnZnVsbFJlc2V0JyBjYXBhYmlsaXRpZXMgYXJlIG11dHVhbGx5IFwiICtcbiAgICAgICAgICAgICAgICAgICAgJ2V4Y2x1c2l2ZSBhbmQgc2hvdWxkIG5vdCBib3RoIGJlIHNldCB0byB0cnVlLiBZb3UgJyArXG4gICAgICAgICAgICAgICAgICAgIFwicHJvYmFibHkgbWVhbnQgdG8ganVzdCB1c2UgJ2Z1bGxSZXNldCcgb24gaXRzIG93blwiKTtcbiAgfVxuICBpZiAodGhpcy5vcHRzLm5vUmVzZXQgPT09IHRydWUpIHtcbiAgICB0aGlzLm9wdHMuZnVsbFJlc2V0ID0gZmFsc2U7XG4gIH1cbiAgaWYgKHRoaXMub3B0cy5mdWxsUmVzZXQgPT09IHRydWUpIHtcbiAgICB0aGlzLm9wdHMubm9SZXNldCA9IGZhbHNlO1xuICB9XG4gIHRoaXMub3B0cy5mYXN0UmVzZXQgPSAhdGhpcy5vcHRzLmZ1bGxSZXNldCAmJiAhdGhpcy5vcHRzLm5vUmVzZXQ7XG4gIHRoaXMub3B0cy5za2lwVW5pbnN0YWxsID0gdGhpcy5vcHRzLmZhc3RSZXNldCB8fCB0aGlzLm9wdHMubm9SZXNldDtcblxuICAvLyBQcmV2ZW50cyBlbXB0eSBzdHJpbmcgY2FwcyBzbyB3ZSBkb24ndCBuZWVkIHRvIHRlc3QgaXQgZXZlcnl3aGVyZVxuICBpZiAodHlwZW9mIHRoaXMub3B0cy5hcHAgPT09ICdzdHJpbmcnICYmIHRoaXMub3B0cy5hcHAudHJpbSgpID09PSAnJykge1xuICAgIHRoaXMub3B0cy5hcHAgPSBudWxsO1xuICB9XG5cbiAgaWYgKCFfLmlzVW5kZWZpbmVkKHRoaXMuY2Fwcy5uZXdDb21tYW5kVGltZW91dCkpIHtcbiAgICB0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMgPSAodGhpcy5jYXBzLm5ld0NvbW1hbmRUaW1lb3V0ICogMTAwMCk7XG4gIH1cblxuICBsb2cuaW5mbyhgU2Vzc2lvbiBjcmVhdGVkIHdpdGggc2Vzc2lvbiBpZDogJHt0aGlzLnNlc3Npb25JZH1gKTtcblxuICBsb2cuZGVidWcoYFtNQ0xPVURdIFN0YXJ0aW5nIGFydGlmYWN0cyBjYXB0dXJpbmcgZm9yIGluaXQgc3RlcHNgKTtcbiAgY29uc3Qgc3RhcnRfcmVjX2NvbW1hbmQgPSBgL29wdC9zdGFydC1jYXB0dXJlLWFydGlmYWN0cy5zaCAke3RoaXMuc2Vzc2lvbklkfSA+IC90bXAvdmlkZW8ubG9nIDI+JjFgO1xuICBleGVjdXRlU2hlbGwoc3RhcnRfcmVjX2NvbW1hbmQsICdbTUNMT1VEXSBzdGFydCBhcnRpZmFjdHMgY2FwdHVyaW5nIGZvciBpbml0IHN0ZXBzJyk7IC8vIDEgZXJyb3IgY29kZSBleHBlY3RlZCBhcyBwcm9jZXNzIHNob3VsZCBiZSBraWxsZWRcbiAgXG4gIC8vIHNhdmUgY3VycmVudCBzZXNzaW9uSWQgZ2xvYmFsbHkgdG8gaGFuZGxlIG5lZ2F0aXZlIHVzZS1jYXNlIGluc3RlYWQgb2YgZGVzaXJlZCBmYWxsYmFja1Nlc3Npb25JZFxuICBwcm9jZXNzLmVudi5zZXNzaW9uSWQgPSB0aGlzLnNlc3Npb25JZFxuXG4gIHJldHVybiBbdGhpcy5zZXNzaW9uSWQsIGNhcHNdO1xufTtcblxuY29tbWFuZHMuZ2V0U2Vzc2lvbnMgPSBhc3luYyBmdW5jdGlvbiBnZXRTZXNzaW9ucyAoKSB7XG4gIGxldCByZXQgPSBbXTtcblxuICBpZiAodGhpcy5zZXNzaW9uSWQpIHtcbiAgICByZXQucHVzaCh7XG4gICAgICBpZDogdGhpcy5zZXNzaW9uSWQsXG4gICAgICBjYXBhYmlsaXRpZXM6IHRoaXMuY2Fwc1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmNvbW1hbmRzLmdldFNlc3Npb24gPSBhc3luYyBmdW5jdGlvbiBnZXRTZXNzaW9uICgpIHtcbiAgaWYgKHRoaXMuY2Fwcy5ldmVudFRpbWluZ3MpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jYXBzLCB7ZXZlbnRzOiB0aGlzLmV2ZW50SGlzdG9yeX0pO1xuICB9XG4gIHJldHVybiB0aGlzLmNhcHM7XG59O1xuXG5jb21tYW5kcy5kZWxldGVTZXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gZGVsZXRlU2Vzc2lvbiAoLyogc2Vzc2lvbklkICovKSB7XG4gIHRoaXMuY2xlYXJOZXdDb21tYW5kVGltZW91dCgpO1xuICBpZiAodGhpcy5pc0NvbW1hbmRzUXVldWVFbmFibGVkICYmIHRoaXMuY29tbWFuZHNRdWV1ZUd1YXJkLmlzQnVzeSgpKSB7XG4gICAgLy8gc2ltcGxlIGhhY2sgdG8gcmVsZWFzZSBwZW5kaW5nIGNvbW1hbmRzIGlmIHRoZXkgZXhpc3RcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBfLmtleXModGhpcy5jb21tYW5kc1F1ZXVlR3VhcmQucXVldWVzKSkge1xuICAgICAgdGhpcy5jb21tYW5kc1F1ZXVlR3VhcmQucXVldWVzW2tleV0gPSBbXTtcbiAgICB9XG4gIH1cblxuICAvLyBzdG9wIHJlY29yZGluZ1xuICBsb2cuZGVidWcoYFtNQ0xPVURdIHN0b3BwaW5nIGNhcHR1cmluZyBhcnRpZmFjdHMgZm9yIHNlc3Npb24gJHt0aGlzLnNlc3Npb25JZH1gKTtcbiAgY29uc3Qgc3RvcF9yZWNfY29tbWFuZCA9IGAvb3B0L3N0b3AtY2FwdHVyZS1hcnRpZmFjdHMuc2ggJHt0aGlzLnNlc3Npb25JZH1gO1xuICBleGVjdXRlU2hlbGwoc3RvcF9yZWNfY29tbWFuZCwgJ1tNQ0xPVURdIHN0b3AgY2FwdHVyaW5nIGFydGlmYWN0cycpO1xuXG4gIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAzMDApKTtcblxuICAvLyB1cGxvYWQgdmlkZW9cbiAgbG9nLmRlYnVnKGBbTUNMT1VEXSB1cGxvYWRpbmcgY2FwdHVyZWQgYXJ0aWZhY3RzYCk7XG4gIGNvbnN0IHVwbG9hZF92aWRlb19jb21tYW5kID0gYC9vcHQvdXBsb2FkLWFydGlmYWN0cy5zaCAke3RoaXMuc2Vzc2lvbklkfSA+PiAvdG1wL3ZpZGVvLmxvZ2A7XG4gIGV4ZWN1dGVTaGVsbCh1cGxvYWRfdmlkZW9fY29tbWFuZCwgJ1tNQ0xPVURdIHVwbG9hZCBjYXB0dXJlZCBhcnRpZmFjdHMnKTtcblxuICB0aGlzLnNlc3Npb25JZCA9IG51bGw7XG59O1xuXG5mdW5jdGlvbiBmaXhDYXBzIChvcmlnaW5hbENhcHMsIGRlc2lyZWRDYXBDb25zdHJhaW50cyA9IHt9KSB7XG4gIGxldCBjYXBzID0gXy5jbG9uZShvcmlnaW5hbENhcHMpO1xuXG4gIC8vIGJvb2xlYW4gY2FwYWJpbGl0aWVzIGNhbiBiZSBwYXNzZWQgaW4gYXMgc3RyaW5ncyAnZmFsc2UnIGFuZCAndHJ1ZSdcbiAgLy8gd2hpY2ggd2Ugd2FudCB0byB0cmFuc2xhdGUgaW50byBib29sZWFuIHZhbHVlc1xuICBsZXQgYm9vbGVhbkNhcHMgPSBfLmtleXMoXy5waWNrQnkoZGVzaXJlZENhcENvbnN0cmFpbnRzLCAoaykgPT4gay5pc0Jvb2xlYW4gPT09IHRydWUpKTtcbiAgZm9yIChsZXQgY2FwIG9mIGJvb2xlYW5DYXBzKSB7XG4gICAgbGV0IHZhbHVlID0gb3JpZ2luYWxDYXBzW2NhcF07XG4gICAgaWYgKF8uaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAodmFsdWUgPT09ICd0cnVlJyB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICBsb2cud2FybihgQ2FwYWJpbGl0eSAnJHtjYXB9JyBjaGFuZ2VkIGZyb20gc3RyaW5nIHRvIGJvb2xlYW4uIFRoaXMgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3JgKTtcbiAgICAgICAgY2Fwc1tjYXBdID0gKHZhbHVlID09PSAndHJ1ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGludCBjYXBhYmlsaXRpZXMgYXJlIG9mdGVuIHNlbnQgaW4gYXMgc3RyaW5ncyBieSBmcmFtZXdvcmtzXG4gIGxldCBpbnRDYXBzID0gXy5rZXlzKF8ucGlja0J5KGRlc2lyZWRDYXBDb25zdHJhaW50cywgKGspID0+IGsuaXNOdW1iZXIgPT09IHRydWUpKTtcbiAgZm9yIChsZXQgY2FwIG9mIGludENhcHMpIHtcbiAgICBsZXQgdmFsdWUgPSBvcmlnaW5hbENhcHNbY2FwXTtcbiAgICBpZiAoXy5pc1N0cmluZyh2YWx1ZSkgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gICAgICBsZXQgbmV3VmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgaWYgKHZhbHVlICE9PSBgJHtuZXdWYWx1ZX1gKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBsb2cud2FybihgQ2FwYWJpbGl0eSAnJHtjYXB9JyBjaGFuZ2VkIGZyb20gc3RyaW5nICgnJHt2YWx1ZX0nKSB0byBpbnRlZ2VyICgke25ld1ZhbHVlfSkuIFRoaXMgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3JgKTtcbiAgICAgIGNhcHNbY2FwXSA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYXBzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2Jhc2Vkcml2ZXIvY29tbWFuZHMvc2Vzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
