"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _appiumIosDevice = require("appium-ios-device");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

const APPLICATION_INSTALLED_NOTIFICATION = 'com.apple.mobile.application_installed';
const INSTALLATION_STAGING_DIR = 'PublicStaging';
const DEFAULT_ITEM_PUSH_TIMEOUT = 30 * 1000;
const APPLICATION_NOTIFICATION_TIMEOUT = 30 * 1000;
const IOS_DEPLOY = 'ios';

class IOSDeploy {
  constructor(udid) {
    this.udid = udid;
  }

  async remove(bundleid) {
    try {
      await (0, _teen_process.exec)(IOS_DEPLOY, ['uninstall', bundleid, '--udid=' + this.udid]);
    } catch (err1) {
      throw new Error(`App is not uninstalled '${bundleid}':\n` + `  - ${err1.message}\n` + `  - ${err1.stderr || err1.stdout || err1.message}`);
    }
  }

  async removeApp(bundleId) {
    await this.remove(bundleId);
  }

  async install(app, timeout) {
    const timer = new _appiumSupport.timing.Timer().start();

    try {
      const bundlePathOnPhone = await this.pushAppBundle(app, timeout);
      await this.installApplication(bundlePathOnPhone);
    } catch (err) {
      _logger.default.warn(`Error installing app: ${err.message}`);

      _logger.default.warn(`Falling back to '${IOS_DEPLOY}' usage`);

      try {
        await _appiumSupport.fs.which(IOS_DEPLOY);
      } catch (err1) {
        throw new Error(`Could not install '${app}':\n` + `  - ${err.message}\n` + `  - '${IOS_DEPLOY}' utility has not been found in PATH. Is it installed?`);
      }

      try {
        await (0, _teen_process.exec)(IOS_DEPLOY, ['install', '--path=' + app, '--udid=' + this.udid]);
      } catch (err1) {
        throw new Error(`Could not install '${app}':\n` + `  - ${err.message}\n` + `  - ${err1.stderr || err1.stdout || err1.message}`);
      }
    }

    _logger.default.info(`App installation succeeded after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
  }

  async installApplication(bundlePathOnPhone) {
    const notificationService = await _appiumIosDevice.services.startNotificationProxyService(this.udid);
    const installationService = await _appiumIosDevice.services.startInstallationProxyService(this.udid);
    const appInstalledNotification = new _bluebird.default(resolve => {
      notificationService.observeNotification(APPLICATION_INSTALLED_NOTIFICATION, {
        notification: resolve
      });
    });

    try {
      await installationService.installApplication(bundlePathOnPhone, {
        PackageType: 'Developer'
      });

      try {
        await appInstalledNotification.timeout(APPLICATION_NOTIFICATION_TIMEOUT, `Could not get the application installed notification within ${APPLICATION_NOTIFICATION_TIMEOUT}ms but we will continue`);
      } catch (e) {
        _logger.default.warn(`Failed to receive the notification. Error: ${e.message}`);
      }
    } finally {
      installationService.close();
      notificationService.close();
    }
  }

  async pushAppBundle(app, timeout = DEFAULT_ITEM_PUSH_TIMEOUT) {
    const timer = new _appiumSupport.timing.Timer().start();
    const afcService = await _appiumIosDevice.services.startAfcService(this.udid);

    try {
      const bundlePathOnPhone = await this.createAppPath(afcService, app);
      await _appiumSupport.fs.walkDir(app, true, async (itemPath, isDir) => {
        const pathOnPhone = _path.default.join(bundlePathOnPhone, _path.default.relative(app, itemPath));

        if (isDir) {
          await afcService.createDirectory(pathOnPhone);
        } else {
          const readStream = _appiumSupport.fs.createReadStream(itemPath, {
            autoClose: true
          });

          const writeStream = await afcService.createWriteStream(pathOnPhone, {
            autoDestroy: true
          });
          writeStream.on('finish', writeStream.destroy);
          let pushError = null;
          const itemPushWait = new _bluebird.default((resolve, reject) => {
            writeStream.on('close', () => {
              if (pushError) {
                reject(pushError);
              } else {
                resolve();
              }
            });

            const onStreamError = e => {
              readStream.unpipe(writeStream);

              _logger.default.debug(e);

              pushError = e;
            };

            writeStream.on('error', onStreamError);
            readStream.on('error', onStreamError);
          });
          readStream.pipe(writeStream);
          await itemPushWait.timeout(timeout, `Could not push '${itemPath}' within the timeout of ${timeout}ms. ` + `Consider increasing the value of 'appPushTimeout' capability.`);
        }
      });

      _logger.default.debug(`Pushed the app files successfully after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);

      return bundlePathOnPhone;
    } finally {
      afcService.close();
    }
  }

  async createAppPath(afcService, localAppPath) {
    const basename = _path.default.basename(localAppPath);

    const relativePath = _path.default.join(INSTALLATION_STAGING_DIR, basename);

    try {
      await afcService.deleteDirectory(relativePath);
    } catch (ign) {}

    await afcService.createDirectory(relativePath);
    return relativePath;
  }

  async installApp(app, timeout) {
    await this.install(app, timeout);
  }

  async isAppInstalled(bundleid) {
    try {
      let {
        stdout,
        stderr,
        code
      } = await (0, _teen_process.exec)(IOS_DEPLOY, ['apps', '--system', '--udid=' + this.udid]);

      if (stdout != null && stdout.indexOf(bundleid) !== -1) {
        _logger.default.debug(bundleid + ' is found among system apps.');

        return true;
      } else {
        _logger.default.debug(bundleid + ' is NOT found among system apps.');
      }
    } catch (err1) {
      throw new Error(`App is no installed among system apps '${bundleid}':\n` + `  - ${err1.message}\n` + `  - ${err1.stderr || err1.stdout || err1.message}`);
    }

    try {
      let {
        stdout,
        stderr,
        code
      } = await (0, _teen_process.exec)(IOS_DEPLOY, ['apps', '--udid=' + this.udid]);

      if (stdout != null && stdout.indexOf(bundleid) !== -1) {
        _logger.default.debug(bundleid + ' is found among non system apps.');

        return true;
      } else {
        _logger.default.debug(bundleid + ' is NOT found among non system apps.');
      }
    } catch (err1) {
      throw new Error(`App is no installed among non system apps '${bundleid}':\n` + `  - ${err1.message}\n` + `  - ${err1.stderr || err1.stdout || err1.message}`);
    }

    return false;
  }

  async getUserInstalledBundleIdsByBundleName(bundleName) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);

    try {
      const applications = await service.listApplications({
        applicationType: 'User'
      });
      return _lodash.default.reduce(applications, (acc, {
        CFBundleName
      }, key) => {
        if (CFBundleName === bundleName) {
          acc.push(key);
        }

        return acc;
      }, []);
    } finally {
      service.close();
    }
  }

  async getPlatformVersion() {
    return await _appiumIosDevice.utilities.getOSVersion(this.udid);
  }

}

var _default = IOSDeploy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
