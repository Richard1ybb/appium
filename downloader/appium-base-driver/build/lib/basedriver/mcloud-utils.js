"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _fs = _interopRequireDefault(require("appium-support/build/lib/fs"));

var _path = _interopRequireDefault(require("path"));

var _axios = _interopRequireDefault(require("axios"));

var _logger = _interopRequireDefault(require("./logger"));

const path = require('path');

async function getSharedFolderForAppUrl(url) {
  const sub = await getLocalFileForAppUrl(url);
  const lastSlashInd = sub.lastIndexOf(path.sep);
  var targetPath;

  if (lastSlashInd != -1) {
    targetPath = sub.substring(0, lastSlashInd);
  } else {
    targetPath = '';
  }

  _logger.default.info(`Target path [getSharedFolderForAppUrl]: ${targetPath}`);

  const folderExists = await _fs.default.exists(targetPath);
  if (!folderExists) await _fs.default.mkdir(targetPath, {
    recursive: true
  });
  return targetPath;
}

async function getLocalFileForAppUrl(url) {
  var sub = url.substring(url.indexOf('//') + 2);
  sub = sub.substring(sub.indexOf('/'));

  if (sub.includes('?')) {
    sub = sub.substring(0, sub.indexOf('?'));
  }

  sub = sub.replace(/\//g, path.sep);

  const targetPath = _path.default.join(process.env.APPIUM_TMP_DIR || os.tmpdir(), sub);

  _logger.default.info(`Target path [getLocalFileForAppUrl]: ${targetPath}`);

  return targetPath;
}

async function getFileContentLength(remoteUrl) {
  const timeout = 5000;
  const requestOpts = {
    url: remoteUrl,
    responseType: 'stream',
    timeout
  };

  try {
    const {
      headers: responseHeaders
    } = await (0, _axios.default)(requestOpts);
    const responseLength = parseInt(responseHeaders['content-length'], 10);

    _logger.default.info("!!CONTENT-LENGTH: " + responseLength);

    return responseLength;
  } catch (err) {
    throw new Error(`Cannot get file content-length from ${remoteUrl}: ${err.message}`);
  }
}

module.exports = {
  getSharedFolderForAppUrl,
  getLocalFileForAppUrl,
  getFileContentLength
};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL21jbG91ZC11dGlscy5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImdldFNoYXJlZEZvbGRlckZvckFwcFVybCIsInVybCIsInN1YiIsImdldExvY2FsRmlsZUZvckFwcFVybCIsImxhc3RTbGFzaEluZCIsImxhc3RJbmRleE9mIiwic2VwIiwidGFyZ2V0UGF0aCIsInN1YnN0cmluZyIsImxvZ2dlciIsImluZm8iLCJmb2xkZXJFeGlzdHMiLCJmcyIsImV4aXN0cyIsIm1rZGlyIiwicmVjdXJzaXZlIiwiaW5kZXhPZiIsImluY2x1ZGVzIiwicmVwbGFjZSIsIm5vZGVQYXRoIiwiam9pbiIsInByb2Nlc3MiLCJlbnYiLCJBUFBJVU1fVE1QX0RJUiIsIm9zIiwidG1wZGlyIiwiZ2V0RmlsZUNvbnRlbnRMZW5ndGgiLCJyZW1vdGVVcmwiLCJ0aW1lb3V0IiwicmVxdWVzdE9wdHMiLCJyZXNwb25zZVR5cGUiLCJoZWFkZXJzIiwicmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VMZW5ndGgiLCJwYXJzZUludCIsImVyciIsIkVycm9yIiwibWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOztBQURBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBR0EsZUFBZUMsd0JBQWYsQ0FBd0NDLEdBQXhDLEVBQTZDO0FBQ3pDLFFBQU1DLEdBQUcsR0FBRyxNQUFNQyxxQkFBcUIsQ0FBQ0YsR0FBRCxDQUF2QztBQUVBLFFBQU1HLFlBQVksR0FBR0YsR0FBRyxDQUFDRyxXQUFKLENBQWdCUCxJQUFJLENBQUNRLEdBQXJCLENBQXJCO0FBQ0EsTUFBSUMsVUFBSjs7QUFDQSxNQUFHSCxZQUFZLElBQUksQ0FBQyxDQUFwQixFQUF1QjtBQUNuQkcsSUFBQUEsVUFBVSxHQUFHTCxHQUFHLENBQUNNLFNBQUosQ0FBYyxDQUFkLEVBQWlCSixZQUFqQixDQUFiO0FBQ0gsR0FGRCxNQUVPO0FBQ0hHLElBQUFBLFVBQVUsR0FBRyxFQUFiO0FBQ0g7O0FBRURFLGtCQUFPQyxJQUFQLENBQWEsMkNBQTBDSCxVQUFXLEVBQWxFOztBQUNBLFFBQU1JLFlBQVksR0FBRyxNQUFNQyxZQUFHQyxNQUFILENBQVVOLFVBQVYsQ0FBM0I7QUFDQSxNQUFHLENBQUNJLFlBQUosRUFDSSxNQUFNQyxZQUFHRSxLQUFILENBQVNQLFVBQVQsRUFBcUI7QUFBQ1EsSUFBQUEsU0FBUyxFQUFHO0FBQWIsR0FBckIsQ0FBTjtBQUVKLFNBQU9SLFVBQVA7QUFDSDs7QUFFRCxlQUFlSixxQkFBZixDQUFxQ0YsR0FBckMsRUFBMEM7QUFDdEMsTUFBSUMsR0FBRyxHQUFHRCxHQUFHLENBQUNPLFNBQUosQ0FBY1AsR0FBRyxDQUFDZSxPQUFKLENBQVksSUFBWixJQUFvQixDQUFsQyxDQUFWO0FBQ0FkLEVBQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDTSxTQUFKLENBQWNOLEdBQUcsQ0FBQ2MsT0FBSixDQUFZLEdBQVosQ0FBZCxDQUFOOztBQUNBLE1BQUdkLEdBQUcsQ0FBQ2UsUUFBSixDQUFhLEdBQWIsQ0FBSCxFQUFzQjtBQUNsQmYsSUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUNNLFNBQUosQ0FBYyxDQUFkLEVBQWlCTixHQUFHLENBQUNjLE9BQUosQ0FBWSxHQUFaLENBQWpCLENBQU47QUFDSDs7QUFDRGQsRUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUNnQixPQUFKLENBQVksS0FBWixFQUFtQnBCLElBQUksQ0FBQ1EsR0FBeEIsQ0FBTjs7QUFFQSxRQUFNQyxVQUFVLEdBQUdZLGNBQVNDLElBQVQsQ0FBY0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGNBQVosSUFBOEJDLEVBQUUsQ0FBQ0MsTUFBSCxFQUE1QyxFQUF5RHZCLEdBQXpELENBQW5COztBQUNBTyxrQkFBT0MsSUFBUCxDQUFhLHdDQUF1Q0gsVUFBVyxFQUEvRDs7QUFDQSxTQUFPQSxVQUFQO0FBQ0g7O0FBRUQsZUFBZW1CLG9CQUFmLENBQW9DQyxTQUFwQyxFQUErQztBQUMzQyxRQUFNQyxPQUFPLEdBQUcsSUFBaEI7QUFDQSxRQUFNQyxXQUFXLEdBQUc7QUFDaEI1QixJQUFBQSxHQUFHLEVBQUUwQixTQURXO0FBRWhCRyxJQUFBQSxZQUFZLEVBQUUsUUFGRTtBQUdoQkYsSUFBQUE7QUFIZ0IsR0FBcEI7O0FBTUEsTUFBSTtBQUNBLFVBQU07QUFDSkcsTUFBQUEsT0FBTyxFQUFFQztBQURMLFFBRUYsTUFBTSxvQkFBTUgsV0FBTixDQUZWO0FBR0EsVUFBTUksY0FBYyxHQUFHQyxRQUFRLENBQUNGLGVBQWUsQ0FBQyxnQkFBRCxDQUFoQixFQUFvQyxFQUFwQyxDQUEvQjs7QUFDQXZCLG9CQUFPQyxJQUFQLENBQVksdUJBQXVCdUIsY0FBbkM7O0FBQ0EsV0FBT0EsY0FBUDtBQUNILEdBUEQsQ0FPRSxPQUFPRSxHQUFQLEVBQVk7QUFDVixVQUFNLElBQUlDLEtBQUosQ0FBVyx1Q0FBc0NULFNBQVUsS0FBSVEsR0FBRyxDQUFDRSxPQUFRLEVBQTNFLENBQU47QUFDSDtBQUNKOztBQUdEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFBRXZDLEVBQUFBLHdCQUFGO0FBQTRCRyxFQUFBQSxxQkFBNUI7QUFBbUR1QixFQUFBQTtBQUFuRCxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdhcHBpdW0tc3VwcG9ydC9idWlsZC9saWIvZnMnO1xyXG5pbXBvcnQgbm9kZVBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0U2hhcmVkRm9sZGVyRm9yQXBwVXJsKHVybCkge1xyXG4gICAgY29uc3Qgc3ViID0gYXdhaXQgZ2V0TG9jYWxGaWxlRm9yQXBwVXJsKHVybCk7XHJcblxyXG4gICAgY29uc3QgbGFzdFNsYXNoSW5kID0gc3ViLmxhc3RJbmRleE9mKHBhdGguc2VwKTtcclxuICAgIHZhciB0YXJnZXRQYXRoO1xyXG4gICAgaWYobGFzdFNsYXNoSW5kICE9IC0xKSB7XHJcbiAgICAgICAgdGFyZ2V0UGF0aCA9IHN1Yi5zdWJzdHJpbmcoMCwgbGFzdFNsYXNoSW5kKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGFyZ2V0UGF0aCA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGxvZ2dlci5pbmZvKGBUYXJnZXQgcGF0aCBbZ2V0U2hhcmVkRm9sZGVyRm9yQXBwVXJsXTogJHt0YXJnZXRQYXRofWApXHJcbiAgICBjb25zdCBmb2xkZXJFeGlzdHMgPSBhd2FpdCBmcy5leGlzdHModGFyZ2V0UGF0aCk7XHJcbiAgICBpZighZm9sZGVyRXhpc3RzKVxyXG4gICAgICAgIGF3YWl0IGZzLm1rZGlyKHRhcmdldFBhdGgsIHtyZWN1cnNpdmUgOiB0cnVlfSk7XHJcbiAgXHJcbiAgICByZXR1cm4gdGFyZ2V0UGF0aDtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYWxGaWxlRm9yQXBwVXJsKHVybCkge1xyXG4gICAgdmFyIHN1YiA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YoJy8vJykgKyAyKVxyXG4gICAgc3ViID0gc3ViLnN1YnN0cmluZyhzdWIuaW5kZXhPZignLycpKTtcclxuICAgIGlmKHN1Yi5pbmNsdWRlcygnPycpKSB7XHJcbiAgICAgICAgc3ViID0gc3ViLnN1YnN0cmluZygwLCBzdWIuaW5kZXhPZignPycpKTtcclxuICAgIH1cclxuICAgIHN1YiA9IHN1Yi5yZXBsYWNlKC9cXC8vZywgcGF0aC5zZXApO1xyXG5cclxuICAgIGNvbnN0IHRhcmdldFBhdGggPSBub2RlUGF0aC5qb2luKHByb2Nlc3MuZW52LkFQUElVTV9UTVBfRElSIHx8IG9zLnRtcGRpcigpLCBzdWIpO1xyXG4gICAgbG9nZ2VyLmluZm8oYFRhcmdldCBwYXRoIFtnZXRMb2NhbEZpbGVGb3JBcHBVcmxdOiAke3RhcmdldFBhdGh9YClcclxuICAgIHJldHVybiB0YXJnZXRQYXRoO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXRGaWxlQ29udGVudExlbmd0aChyZW1vdGVVcmwpIHtcclxuICAgIGNvbnN0IHRpbWVvdXQgPSA1MDAwO1xyXG4gICAgY29uc3QgcmVxdWVzdE9wdHMgPSB7XHJcbiAgICAgICAgdXJsOiByZW1vdGVVcmwsXHJcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnc3RyZWFtJyxcclxuICAgICAgICB0aW1lb3V0LFxyXG4gICAgfTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcclxuICAgICAgICB9ID0gYXdhaXQgYXhpb3MocmVxdWVzdE9wdHMpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlTGVuZ3RoID0gcGFyc2VJbnQocmVzcG9uc2VIZWFkZXJzWydjb250ZW50LWxlbmd0aCddLCAxMCk7XHJcbiAgICAgICAgbG9nZ2VyLmluZm8oXCIhIUNPTlRFTlQtTEVOR1RIOiBcIiArIHJlc3BvbnNlTGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2VMZW5ndGg7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBnZXQgZmlsZSBjb250ZW50LWxlbmd0aCBmcm9tICR7cmVtb3RlVXJsfTogJHtlcnIubWVzc2FnZX1gKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0geyBnZXRTaGFyZWRGb2xkZXJGb3JBcHBVcmwsIGdldExvY2FsRmlsZUZvckFwcFVybCwgZ2V0RmlsZUNvbnRlbnRMZW5ndGggfSJdLCJmaWxlIjoibGliL2Jhc2Vkcml2ZXIvbWNsb3VkLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4uXFwuLlxcLi4ifQ==
